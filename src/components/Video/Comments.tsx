"use client";
import React, { useState } from "react";
import {
	Accordion,
	AccordionContent,
	AccordionItem,
	AccordionTrigger,
} from "@/components/ui/accordion";
import { CComment } from "@/lib/types";
import { Input } from "../ui/input";
import { useUser } from "@/providers/UserProvider";
import { croppedAvatarUrl, getSrc, timeSince } from "@/lib/utils";
import Image from "next/image";
import { IoIosSend } from "react-icons/io";
import toast from "react-hot-toast";
import axios from "axios";
import CustomTooltip from "../Nav/CustomTooltip";
import Link from "next/link";

const Comments = ({
	comments,
	video_id,
}: {
	comments: CComment[];
	video_id: string;
}) => {
	const [shownComments, setShownComments] = useState<CComment[]>(comments);
	const { user } = useUser();
	const [body, setBody] = useState(""); // the body of the new comment that user may submit

	const handleSubmit = async () => {
		if (!user._id) return toast.error("Sign in required");
		if (!body) return toast.error("Comment body can't be empty");

		const { errMessage } = (
			await axios.post("/api/videos/addComment", {
				body,
				video_id,
			})
		).data; // the comment is registered to the db here on this api route
		if (errMessage) return toast.error(errMessage);

		const comment: CComment = {
			_id: Math.random().toString(),
			body,
			commenter: user,
			createdAt: new Date(),
			dislikes: 0,
			likes: 0,
		}; // a new comment made here only instead of using the one generated by the server

		setShownComments([comment, ...shownComments]);
		setBody("");
	};

	return (
		<Accordion type="single" collapsible defaultValue="item-1">
			<AccordionItem
				value="item-1"
				className="px-4 border-2 sm:border-4 rounded-xl"
			>
				<AccordionTrigger>
					<div className="flex justify-between w-full pr-2">
						<p>Comments</p>
					</div>
				</AccordionTrigger>
				<AccordionContent>
					<div className="flex items-center gap-2 mb-4">
						<Link href={`/user/${user.email}`}>
							<Image
								src={getSrc(croppedAvatarUrl(user.avatar.public_id), "image")}
								alt="Profile icon"
								width="40"
								height="40"
								className="rounded-full min-w-8 min-h-8 aspect-square"
							/>
						</Link>
						<Input
							placeholder="Add comment..."
							value={body}
							onChange={(e) => setBody(e.target.value)}
						/>
						<CustomTooltip
							icon={<IoIosSend onClick={handleSubmit} />}
							text="Post comment"
							size={30}
						/>
					</div>
					<div className="w-full gap-2 flex flex-col">
						{shownComments.map(({ body, commenter, createdAt }) => (
							<div
								className="w-full flex gap-4 border rounded-xl p-4"
								key={createdAt.toISOString()}
							>
								<Link href={`/user/${commenter.email}`}>
									<Image
										src={getSrc(
											croppedAvatarUrl(commenter.avatar.public_id),
											"image"
										)}
										alt=""
										width="40"
										height="40"
										className="rounded-full aspect-square"
									/>
								</Link>
								<div className="w-full flex flex-col gap-2">
									<div className="flex items-center gap-2">
										<p className="text-base">{commenter.username}</p>‚óè
										<p className="opacity-75 text-xs">
											{timeSince(createdAt.toString())}
										</p>
									</div>
									<p className="break-words pr-4">{body}</p>
								</div>
							</div>
						))}
					</div>
				</AccordionContent>
			</AccordionItem>
		</Accordion>
	);
};

export default Comments;
